/*
** EPITECH PROJECT, 2022
** zlib
** File description:
** ctype functions - header
*/

#ifndef ZCTYPE_H_
    #define ZCTYPE_H_

    ////////////////////////////////////////////////////////////
    /// \def TYPEDEF
    ////////////////////////////////////////////////////////////
    typedef unsigned char uchar;
    typedef unsigned short ushort;
    typedef unsigned int uint;
    typedef unsigned long ulong;
    typedef signed long long llong;
    typedef unsigned long long ullong;

    ////////////////////////////////////////////////////////////
    /// \def NULL
    ////////////////////////////////////////////////////////////
    #ifndef NULL
        #define NULL ((void *)0)
    #endif

    ////////////////////////////////////////////////////////////
    /// \def BOOL
    ////////////////////////////////////////////////////////////
    #ifndef bool
        #define bool _Bool
        #define true (1)
        #define false (0)
    #endif

    ////////////////////////////////////////////////////////////
    /// \def EXIT_SUCCESS
    ////////////////////////////////////////////////////////////
    #ifndef EXIT_SUCCESS
        #define EXIT_SUCCESS 0
    #endif

    ////////////////////////////////////////////////////////////
    /// \def EXIT_FAILURE
    ////////////////////////////////////////////////////////////
    #ifndef EXIT_FAILURE
        #define EXIT_FAILURE 1
    #endif

    ////////////////////////////////////////////////////////////
    /// \def UNUSED
    ////////////////////////////////////////////////////////////
    #define UNUSED __attribute__((unused))

    ////////////////////////////////////////////////////////////
    /// \def EXIT_ERROR
    ////////////////////////////////////////////////////////////
    #define EXIT_ERROR 84

    ////////////////////////////////////////////////////////////
    /// \def INT_TO_ASCII
    ////////////////////////////////////////////////////////////
    #define INT_TO_ASCII 48

    ////////////////////////////////////////////////////////////
    /// \def MAX_NEGINT
    ////////////////////////////////////////////////////////////
    #define MAX_NEGINT -2147483648

    ////////////////////////////////////////////////////////////
    /// \def MAX_POSINT
    ////////////////////////////////////////////////////////////
    #define MAX_POSINT 2147483647

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is alpha
    ///
    /// \param c The character to check
    ///
    /// \return true if the character is alpha, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisalpha(char c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is a ascii character
    ///
    /// \param c character to check
    ///
    /// \return true if is a ascii character, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisascii(int c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is in lowercase
    ///
    /// \param c The character to check
    ///
    /// \return true if the character is in lowercase, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zislower(char c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is negative
    ///
    /// \param c character to check
    ///
    /// \return true if is negative, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisneg(int c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is a digit
    ///
    /// \param c character to check
    ///
    /// \return true if is a digit, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisnum(char c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character printable
    ///
    /// \param c character to check
    ///
    /// \return true if is printable, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisprintable(char str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is a sign
    ///
    /// \param c character to check
    ///
    /// \return true if is a sign, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zissign(int c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is a space
    ///
    /// \param c character to check
    ///
    /// \return true if is a space, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisspace(int c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is uppercase
    ///
    /// \param c The character to check
    ///
    /// \return true if the character is uppercase, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zisupper(char c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only alphanumeric characters
    ///
    /// \param s string to check
    ///
    /// \return true if contains only alphanumeric characters, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zstrisalpha(char const *s);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contains only digits and alphabetic characters
    ///
    /// \param str The string to check
    ///
    /// \return true if the string is alphanumeric, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zstrisalphanum(char const *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only lower characters
    ///
    /// \param str string to check
    ///
    /// \return true if contains only lower characters, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zstrislower(char const *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only digits
    ///
    /// \param str string to check
    ///
    /// \return true if contains only digits, false otherwise
    bool zstrisnum(char const *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only printable characters
    ///
    /// \param str string to check
    ///
    /// \return true if contains only printable characters, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zstrisprintable(char const *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only upper characters
    ///
    /// \param str string to check
    ///
    /// \return true if contains only upper characters, false otherwise
    ///
    ////////////////////////////////////////////////////////////
    bool zstrisupper(char const *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only lower characters,
    /// otherwise convert it
    ///
    /// \param str String to check
    ///
    /// \return The string in lower case
    ///
    ////////////////////////////////////////////////////////////
    char *zstrtolower(char *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a string contain only lower characters,
    /// otherwise convert it
    ///
    /// \param str String to check
    ///
    /// \return The string in upper case
    ///
    ////////////////////////////////////////////////////////////
    char *zstrtoupper(char *str);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is upper, if true convert it to lower
    ///
    /// \param c character to check
    ///
    /// \return the character in lower case
    ///
    ////////////////////////////////////////////////////////////
    int ztolower(int c);

    ////////////////////////////////////////////////////////////
    /// \brief Check if a character is lower, if true convert it to upper
    ///
    /// \param c character to check
    ///
    /// \return the character in upper case
    ///
    ////////////////////////////////////////////////////////////
    int ztoupper(int c);

#endif /* !ZCTYPE_H_ */
